generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                           String              @id @default(auto()) @map("_id") @db.ObjectId
  username                     String              @unique
  email                        String              @unique
  image                        String?
  hashedPassword               String?
  NITUsername                  String?
  NITPassword                  String?
  verifyCode                   String?
  verifyCodeExpiry             DateTime?
  isVerified                   Boolean             @default(false)
  isAcceptingAnonymousMessages Boolean             @default(true)
  course                       String?
  batch                        String?
  branch                       String?
  loginDays                    Int?
  loginStreak                  Int?
  honorScore                   Int                 @default(100)
  lastSeen                     DateTime            @default(now())
  activeStatus                 Boolean             @default(false)
  createdAt                    DateTime            @default(now())
  // Relations
  anonymousMessages            AnonymousMessage[]
  
  // Conversations and messages
  conversationIds              String[]            @db.ObjectId
  conversations                Conversation[]      @relation(fields: [conversationIds], references: [id])
  seenMessageIds               String[]            @db.ObjectId
  seenMessages                 Message[]           @relation("Seen", fields: [seenMessageIds], references: [id])
  messages                     Message[]
  
  // Attendance Metrics
  subjects                     SubjectMetrics[]
  overallAttendedClasses       Int                 @default(0)
  overallTotalClasses          Int                 @default(0)
  overallPercentage            Float               @default(0)
  
  // Attendance Records
  attendanceRecords            Attendance[]
  dailyAttendanceRecords       DailyAttendance[]

  // Additional fields
  mobileNumber                 String?
  hostel                       String?
  
  // Products relations
  products                     Product[]
  interestedProductIds         String[]            @db.ObjectId
  interestedProducts           Product[]           @relation("InterestedProducts", fields: [interestedProductIds], references: [id])
  
  // Reactions
  reactions                    Reaction[]

  // NextAuth relations
  accounts                     Account[]
  sessions                     Session[]
}

model AnonymousMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  
  // Relation to User
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId 
  createdAt      DateTime @default(now())
  lastMessageAt  DateTime @default(now())
  name           String? 
  isGroup        Boolean?
  isAnonymous    Boolean? @default(false)
  
  userIds        String[] @db.ObjectId
  users          User[]   @relation(fields: [userIds], references: [id])
  
  messagesIds    String[] @db.ObjectId
  messages       Message[]
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  GIF
  FILE
  VIDEO_CALL
  MARKETPLACE_INTEREST
}

model Message {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  body           String?
  image          String?     // Deprecated - use fileUrl instead
  fileUrl        String?     // URL to any file (image, video, gif, document)
  fileName       String?     // Original file name
  fileType       String?     // MIME type of the file
  fileSize       Int?        // File size in bytes
  type           MessageType @default(TEXT)
  createdAt      DateTime    @default(now())
  
  seenIds        String[] @db.ObjectId
  seen           User[]   @relation("Seen", fields: [seenIds], references: [id])
  
  conversationId String   @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  senderId       String   @db.ObjectId
  sender         User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  
  // Reply functionality
  replyToId      String?  @db.ObjectId
  replyTo        Message? @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies        Message[] @relation("MessageReplies")
  
  // Reactions
  reactions      Reaction[]
}

model Reaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  emoji     String   // The emoji reaction (üëç, ‚ù§Ô∏è, üòÇ, etc.)
  createdAt DateTime @default(now())
  
  // Relations
  messageId String   @db.ObjectId
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([messageId, userId, emoji]) // Prevent duplicate reactions from same user
}

model SubjectMetrics {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  subjectCode          String
  subjectName          String
  subjectProfessor     String
  attendedClasses      Int      @default(0)
  totalClasses         Int      @default(0)
  attendancePercentage Float    @default(0)
  isAbove75            Boolean  @default(false)
  classesNeeded        Int      @default(0)
  classesCanSkip       Int      @default(0)
  
  // Link back to User
  userId               String   @db.ObjectId
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Attendance {
  id       String              @id @default(auto()) @map("_id") @db.ObjectId
  userId   String              @db.ObjectId
  user     User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  date     DateTime            @default(now())
  
  // One-to-many with AttendanceSubject
  subjects AttendanceSubject[]
}

model AttendanceSubject {
  id                    String     @id @default(auto()) @map("_id") @db.ObjectId
  slNo                  String
  subjectCode           String
  subjectName           String
  facultyName           String
  presentTotal          String
  attendancePercentage  String
  
  // Link back to Attendance
  attendanceId          String     @db.ObjectId
  attendance            Attendance @relation(fields: [attendanceId], references: [id], onDelete: Cascade)
}

model DailyAttendance {
  id       String                 @id @default(auto()) @map("_id") @db.ObjectId
  userId   String                 @db.ObjectId
  user     User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  date     DateTime               @default(now())
  
  // One-to-many with DailyAttendanceSubject
  subjects DailyAttendanceSubject[]
}

model DailyAttendanceSubject {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  subjectCode         String
  subjectName         String
  facultyName         String
  attendedClasses     Int
  totalClasses        Int
  
  // Link back to DailyAttendance
  dailyAttendanceId   String            @db.ObjectId
  dailyAttendance     DailyAttendance   @relation(fields: [dailyAttendanceId], references: [id], onDelete: Cascade)
}


enum ProductStatus {
  AVAILABLE
  RESERVED
  SOLD
}

model Product {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Float
  status      ProductStatus @default(AVAILABLE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Product details
  category    String
  condition   String?       // Like new, good, fair, etc.
  
  // Location info
  hostel      String?
  
  // Images
  mainImage   String
  images      String[]      // Additional product images
  
  // QR code for payments
  paymentQR   String?
  
  // Seller information
  sellerId    String        @db.ObjectId
  seller      User          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  
  // Interested buyers
  interestedUserIds String[] @db.ObjectId
  interestedUsers   User[]   @relation("InterestedProducts", fields: [interestedUserIds], references: [id])
}

// NextAuth.js Models for OAuth support
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

